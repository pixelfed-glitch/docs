import{_ as n,E as r,c as l,m as e,a as o,J as a,V as i,o as s}from"./chunks/framework.wUJtDaaB.js";const De=JSON.parse('{"title":"Pixelfed + Docker customization","description":"","frontmatter":{},"headers":[],"relativePath":"running-pixelfed/docker/customize.md","filePath":"running-pixelfed/docker/customize.md"}'),d={name:"running-pixelfed/docker/customize.md"},c=i('<h1 id="pixelfed-docker-customization" tabindex="-1">Pixelfed + Docker customization <a class="header-anchor" href="#pixelfed-docker-customization" aria-label="Permalink to &quot;Pixelfed + Docker customization&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">If anything is confusing, unclear, missing, or maybe even wrong on this page, then <em>please</em> let us know <a href="https://github.com/pixelfed/pixelfed/issues/new" target="_blank" rel="noreferrer">by submitting a bug report</a> ❤️</p></div><div class="tip custom-block"><p class="custom-block-title">Most, if not all, configuration options for both Pixelfed and Docker is included and documented in the <code>.env.docker</code> (or <code>.env</code> file once you copied it during the installation)</p><p>It&#39;s highly recommended to give it a read from top to bottom, or trying to search it for the thing you would like to change.</p><p>We of course aim for this page to cover <em>everything</em>, and if we missed anything, please submit a Pull Request or a ticket for us ❤️</p></div><h2 id="run-script-on-startup-entrypoint" tabindex="-1">Run script on startup (ENTRYPOINT) <a class="header-anchor" href="#run-script-on-startup-entrypoint" aria-label="Permalink to &quot;Run script on startup (ENTRYPOINT)&quot;">​</a></h2><p>When a Pixelfed container starts up, the <a href="https://docs.docker.com/engine/reference/builder/#entrypoint" target="_blank" rel="noreferrer"><code>ENTRYPOINT</code></a> script will</p><ol><li>Search the <code>/docker/entrypoint.d/</code> directory for files and for each file (in lexical order).</li><li>Check if the file is executable. <ol><li>If the file is <em>not</em> executable, print an error and exit the container.</li></ol></li><li>If the file has the extension <code>.envsh</code>, the file will be <a href="https://superuser.com/a/46146" target="_blank" rel="noreferrer">sourced</a>.</li><li>If the file has the extension <code>.sh</code>, the file will be run like a regular script.</li><li>Any other file extension will log a warning and be ignored.</li></ol><h3 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h3><p>You can set the environment variable <code>DOCKER_APP_ENTRYPOINT_DEBUG=1</code> to show the verbose output of each <code>entrypoint.d</code> script is doing.</p><h3 id="included-scripts" tabindex="-1">Included scripts <a class="header-anchor" href="#included-scripts" aria-label="Permalink to &quot;Included scripts&quot;">​</a></h3><ul><li><code>01-permissions.sh</code> (optionally) ensures permissions for files are corrected (see <a href="#fixing-ownership-on-startup">fixing ownership on startup</a>).</li><li><code>02-check-config.sh</code> Ensures your <code>.env</code> file is valid - like missing quotes or syntax errors.</li><li><code>04-defaults.envsh</code> calculates Docker container environment variables needed for <a href="#templating">templating</a> configuration files.</li><li><code>05-templating.sh</code> renders <a href="#templating">template</a> configuration files.</li><li><code>10-storage.sh</code> ensures Pixelfed storage related permissions and commands are run.</li><li><code>11-first-time-setup.sh</code> automatically runs all &quot;one time setup&quot; steps for a new Pixelfed server.</li><li><code>12-migrations.sh</code> optionally run database migrations on container start up.</li><li><code>20-horizon.sh</code> ensures <a href="https://laravel.com/docs/master/horizon" target="_blank" rel="noreferrer">Laravel Horizon</a> used by Pixelfed is configured.</li><li><code>30-cache.sh</code> ensures all Pixelfed caches (router, view, config) are primed.</li></ul><h3 id="disabling-entrypoint-or-individual-scripts" tabindex="-1">Disabling <code>ENTRYPOINT</code> or individual scripts <a class="header-anchor" href="#disabling-entrypoint-or-individual-scripts" aria-label="Permalink to &quot;Disabling `ENTRYPOINT` or individual scripts&quot;">​</a></h3><p>To disable the entire <code>ENTRYPOINT</code> you can set the variable <code>ENTRYPOINT_SKIP=1</code>.</p><p>To disable individual <code>ENTRYPOINT</code> scripts, you can add the filename to the space (<code>&quot; &quot;</code>) separated variable <code>ENTRYPOINT_SKIP_SCRIPTS</code>. (example: <code>ENTRYPOINT_SKIP_SCRIPTS=&quot;10-storage.sh 30-cache.sh&quot;</code>)</p><h2 id="override-anything-and-everything" tabindex="-1">Override anything and everything <a class="header-anchor" href="#override-anything-and-everything" aria-label="Permalink to &quot;Override anything and everything&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>With the default Pixelfed <code>docker-compose.yml</code> the <code>overrides</code> bind mount is enabled by default for both <code>web</code> and <code>worker</code> service.</p><p>The <code>overrides</code> folder on the host machine is in <code>./docker-compose-state/overrides</code> and can be changed via <code>DOCKER_APP_HOST_OVERRIDES_PATH</code> in the <code>.env</code> file.</p></div><p>If you mount a bind volume (can be read-only) in <code>/docker/overrides</code> then all files and directories within that directory will be copied on top of <code>/</code>.</p><p>This enables you to create or override <em>anything</em> within the container during container startup.</p><p>The copy operation happens as one of the first things in the <code>ENTRYPOINT</code> so you can put even override <a href="#templating">templates</a> and the <a href="#run-script-on-startup-entrypoint">included <code>ENTRYPOINT</code> scripts</a> - or add new ones!</p><p>Of course it can also be used to override <code>php.ini</code>, <code>index.php</code> or any other config/script files you would want to.</p><h3 id="override-examples" tabindex="-1">Override examples <a class="header-anchor" href="#override-examples" aria-label="Permalink to &quot;Override examples&quot;">​</a></h3><ol><li>To override <code>/usr/local/etc/php/php.ini</code> in the container, put the source file in <code>./docker-compose-state/overrides/usr/local/etc/php/php.ini</code>.</li><li>To create <code>/a/fantastic/example.txt</code> in the container put the source file in <code>./docker-compose-state/overrides/a/fantastic/example.txt</code>.</li><li>To override the default <code>/docker/templates/php.ini</code> template, put the source file in <code>./docker-compose-state/overrides/docker/templates/php.ini</code>.</li><li>To override <code>/a/path/inside/the/container</code>, put the source file in <code>./docker-compose-state/overrides/a/path/inside/the/container</code>.</li></ol><h2 id="templating" tabindex="-1">Templating <a class="header-anchor" href="#templating" aria-label="Permalink to &quot;Templating&quot;">​</a></h2><p>The Docker container can do some basic templating (more like variable replacement) as part of the entrypoint scripts via <a href="https://docs.gomplate.ca/" target="_blank" rel="noreferrer">gomplate</a>.</p><p>Any file in the <code>/docker/templates/</code> directory will be templated and written to the proper directory.</p><h3 id="file-path-examples" tabindex="-1">File path examples <a class="header-anchor" href="#file-path-examples" aria-label="Permalink to &quot;File path examples&quot;">​</a></h3><ol><li>To template <code>/usr/local/etc/php/php.ini</code> in the container, put the source file in <code>/docker/templates/usr/local/etc/php/php.ini</code>.</li><li>To template <code>/a/fantastic/example.txt</code> in the container put the source file in <code>/docker/templates/a/fantastic/example.txt</code>.</li><li>To template <code>/some/path/anywhere</code> in the container, put the source file in <code>/docker/templates/some/path/anywhere</code>.</li></ol><h3 id="available-variables" tabindex="-1">Available variables <a class="header-anchor" href="#available-variables" aria-label="Permalink to &quot;Available variables&quot;">​</a></h3><p>Variables available for templating are sourced (in order, so <em>last</em> source takes precedence) like this:</p><ol><li><code>env:</code> in your <code>docker-compose.yml</code> or <code>-e</code> in your <code>docker run</code> / <code>docker compose run</code> commands.</li><li>Any exported variables in <code>.envsh</code> files loaded <em>before</em> <code>05-templating.sh</code> (e.g., any file with <code>04-</code>, <code>03-</code>, <code>02-</code>, <code>01-</code> or <code>00-</code> prefix).</li><li>All key and value pairs in <code>/var/www/.env.docker</code> (default values, you should not edit this file!)</li><li>All key and value pairs in <code>/var/www/.env</code>.</li></ol><h3 id="template-guide-101" tabindex="-1">Template guide 101 <a class="header-anchor" href="#template-guide-101" aria-label="Permalink to &quot;Template guide 101&quot;">​</a></h3><p>Please see the <a href="https://docs.gomplate.ca/" target="_blank" rel="noreferrer"><code>gomplate</code> documentation</a> for a comprehensive overview.</p><p>The most frequent use case you have is likely to print an environment variable (or a default value if it&#39;s missing), so this is how to do that:</p><ul><li><code>{{ getenv &quot;VAR_NAME&quot; }}</code> print an environment variable and <strong>fail</strong> if the variable is not set. (<a href="https://docs.gomplate.ca/functions/env/#envgetenv" target="_blank" rel="noreferrer">docs</a>)</li><li><code>{{ getenv &quot;VAR_NAME&quot; &quot;default&quot; }}</code> print an environment variable and print <code>default</code> if the variable is not set. (<a href="https://docs.gomplate.ca/functions/env/#envgetenv" target="_blank" rel="noreferrer">docs</a>)</li></ul><p>The script will <em>fail</em> if you reference a variable that does not exist (and doesn&#39;t have a default value) in a template.</p><p>Please see the</p><ul><li><a href="https://docs.gomplate.ca/syntax/" target="_blank" rel="noreferrer"><code>gomplate</code> syntax documentation</a></li><li><a href="https://docs.gomplate.ca/functions/" target="_blank" rel="noreferrer"><code>gomplate</code> functions documentation</a></li></ul><h2 id="fixing-ownership-on-startup" tabindex="-1">Fixing ownership on startup <a class="header-anchor" href="#fixing-ownership-on-startup" aria-label="Permalink to &quot;Fixing ownership on startup&quot;">​</a></h2><p>You can set the environment variable <code>DOCKER_APP_ENSURE_OWNERSHIP_PATHS</code> to a list of paths that should have their <code>$USER</code> and <code>$GROUP</code> ownership changed to the configured runtime user and group during container bootstrapping.</p><p>The variable is a space-delimited list shown below and accepts both relative and absolute paths:</p><ul><li><code>DOCKER_APP_ENSURE_OWNERSHIP_PATHS=&quot;./storage ./bootstrap&quot;</code></li><li><code>DOCKER_APP_ENSURE_OWNERSHIP_PATHS=&quot;/some/other/folder&quot;</code></li></ul><h2 id="one-time-setup-tasks" tabindex="-1">One-time setup tasks <a class="header-anchor" href="#one-time-setup-tasks" aria-label="Permalink to &quot;One-time setup tasks&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The script stores <code>lock</code> files in the <code>storage/docker/once</code> folder to ensure that these tasks are only run once, so for new Pixelfed servers, you do not need to disable this behavior!</p></div><p>The Docker container will by default try to run the required <a href="./../generic/installation.html#one-time-setup-tasks">One-time setup tasks</a> for you on startup.</p><p>If your Pixelfed server already have run these tasks, you must disable this by setting <code>DOCKER_APP_RUN_ONE_TIME_SETUP_TASKS=0</code> in your <code>.env</code> file.</p><h2 id="automatic-database-migrations" tabindex="-1">Automatic database migrations <a class="header-anchor" href="#automatic-database-migrations" aria-label="Permalink to &quot;Automatic database migrations&quot;">​</a></h2><p>The init script will by default only <em>detect</em> if there are new database migrations - but not apply them - as these can potentially be destructive or take a long time to apply.</p><p>By setting <code>DB_APPLY_NEW_MIGRATIONS_AUTOMATICALLY=1</code> in your <code>.env</code> file, the script will automatically apply new migrations when they are detected.</p><h2 id="build-settings-arguments" tabindex="-1">Build settings (arguments) <a class="header-anchor" href="#build-settings-arguments" aria-label="Permalink to &quot;Build settings (arguments)&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">Most of these build arguments is configurable in your <code>.env</code> file when using the <code>docker-compose.yml</code> from Pixelfed!</p></div><p>The Pixelfed Dockerfile utilizes <a href="https://docs.docker.com/build/building/multi-stage/" target="_blank" rel="noreferrer">Docker Multi-stage builds</a> and <a href="https://docs.docker.com/build/guide/build-args/" target="_blank" rel="noreferrer">Build arguments</a>.</p><p>Using <em>build arguments</em> allows us to create a flexible and more maintainable Dockerfile, supporting <a href="./runtimes.html">multiple runtimes</a> (<a href="./runtimes.html#fpm">FPM</a>, <a href="./runtimes.html#nginx-fpm">Nginx</a>, <a href="./runtimes.html#apache">Apache + mod_php</a>) and end-user flexibility without having to fork or copy the Dockerfile.</p><p><em>Build arguments</em> can be configured using <code>--build-arg &#39;name=value&#39;</code> for <code>docker build</code>, <code>docker compose build</code> and <code>docker buildx build</code>. For <code>docker-compose.yml</code>, the <code>args</code> key for <a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#build" target="_blank" rel="noreferrer"><code>build</code></a> can be used.</p><div class="warning custom-block"><p class="custom-block-title">Most settings have two names in the title. The first one is the build arg name (<code>--build-arg</code>) and the second is the name in your <code>.env</code> file when using Docker Compose</p></div>',53),p={id:"php-version",tabindex:"-1"},h=e("code",null,"PHP_VERSION",-1),u=e("a",{class:"header-anchor",href:"#php-version","aria-label":'Permalink to "`PHP_VERSION` <Badge type="tip" text="DOCKER_APP_PHP_VERSION in your .env file" />"'},"​",-1),_=i('<p>The <code>PHP</code> version to use when building the runtime container.</p><p>Any valid Docker Hub PHP version is acceptable here, as long as it&#39;s <a href="https://hub.docker.com/_/php/tags" target="_blank" rel="noreferrer">published to Docker Hub</a></p><p><strong>Example values</strong>:</p><ul><li><code>8</code> will use the latest version of PHP 8</li><li><code>8.1</code> will use the latest version of PHP 8.1</li><li><code>8.2.14</code> will use PHP 8.2.14</li><li><code>latest</code> will use whatever is the latest PHP version</li></ul><p><strong>Default value</strong>: <code>8.1</code></p>',5),m={id:"php-pecl-extensions",tabindex:"-1"},f=e("code",null,"PHP_PECL_EXTENSIONS",-1),g=e("a",{class:"header-anchor",href:"#php-pecl-extensions","aria-label":'Permalink to "`PHP_PECL_EXTENSIONS` <Badge type="warning" text="not available in your .env file" />"'},"​",-1),b=i('<p>PECL extensions to install via <code>pecl install</code></p><p>Use <a href="#php_pecl_extensions_extra">PHP_PECL_EXTENSIONS_EXTRA</a> if you want to add <em>additional</em> extenstions.</p><p>Only change this setting if you want to change the baseline extensions.</p><p>See the <a href="https://hub.docker.com/_/php" target="_blank" rel="noreferrer"><code>PECL extensions</code> documentation on Docker Hub</a> for more information.</p><p><strong>Default value</strong>: <code>imagick redis</code></p>',5),v={id:"php-pecl-extensions-extra",tabindex:"-1"},P=e("code",null,"PHP_PECL_EXTENSIONS_EXTRA",-1),E=e("a",{class:"header-anchor",href:"#php-pecl-extensions-extra","aria-label":'Permalink to "`PHP_PECL_EXTENSIONS_EXTRA` <Badge type="tip" text="DOCKER_APP_PHP_PECL_EXTENSIONS_EXTRA in your .env file" />"'},"​",-1),x=e("p",null,[o("Extra PECL extensions (separated by space) to install via "),e("code",null,"pecl install")],-1),y=e("p",null,[o("See the "),e("a",{href:"https://hub.docker.com/_/php",target:"_blank",rel:"noreferrer"},[e("code",null,"PECL extensions"),o(" documentation on Docker Hub")]),o(" for more information.")],-1),T=e("p",null,[e("strong",null,"Default value"),o(": "),e("code",null,'""')],-1),k={id:"php-extensions",tabindex:"-1"},S=e("code",null,"PHP_EXTENSIONS",-1),A=e("a",{class:"header-anchor",href:"#php-extensions","aria-label":'Permalink to "`PHP_EXTENSIONS` <Badge type="warning" text="not available in your .env file" />"'},"​",-1),N=i('<p>PHP Extensions to install via <code>docker-php-ext-install</code>.</p><p><strong>NOTE:</strong> use <a href="#php_extensions_extra"><code>PHP_EXTENSIONS_EXTRA</code></a> if you want to add <em>additional</em> extensions; only override this if you&#39;re going to change the baseline extensions.</p><p>See the <a href="https://hub.docker.com/_/php" target="_blank" rel="noreferrer"><code>How to install more PHP extensions</code> documentation on Docker Hub</a> for more information</p><p><strong>Default value</strong>: <code>intl bcmath zip pcntl exif curl gd</code></p>',4),R={id:"php-extensions-extra",tabindex:"-1"},O=e("code",null,"PHP_EXTENSIONS_EXTRA",-1),w=e("a",{class:"header-anchor",href:"#php-extensions-extra","aria-label":'Permalink to "`PHP_EXTENSIONS_EXTRA` <Badge type="tip" text="DOCKER_APP_PHP_EXTENSIONS_EXTRA in your .env file" />"'},"​",-1),I=e("p",null,[o("Extra PHP Extensions (separated by space) to install via "),e("code",null,"docker-php-ext-install"),o(".")],-1),D=e("p",null,[o("See the "),e("a",{href:"https://hub.docker.com/_/php",target:"_blank",rel:"noreferrer"},[e("code",null,"How to install more PHP extensions"),o(" documentation on Docker Hub")]),o(" for more information.")],-1),C=e("p",null,[e("strong",null,"Default value"),o(": "),e("code",null,'""')],-1),q={id:"php-extensions-database",tabindex:"-1"},H=e("code",null,"PHP_EXTENSIONS_DATABASE",-1),V=e("a",{class:"header-anchor",href:"#php-extensions-database","aria-label":'Permalink to "`PHP_EXTENSIONS_DATABASE` <Badge type="warning" text="not available in your .env file" />"'},"​",-1),B=e("p",null,"PHP database extensions to install.",-1),X=e("p",null,[o("By default, we install both "),e("code",null,"pgsql"),o(" and "),e("code",null,"mysql"),o(" since they're more convenient (and add very little build time! But it can be overwritten here if desired.")],-1),K=e("p",null,[e("strong",null,"Default value"),o(": "),e("code",null,"pdo_pgsql pdo_mysql pdo_sqlite")],-1),L={id:"composer-version",tabindex:"-1"},Y=e("code",null,"COMPOSER_VERSION",-1),z=e("a",{class:"header-anchor",href:"#composer-version","aria-label":'Permalink to "`COMPOSER_VERSION` <Badge type="warning" text="not available in your .env file" />"'},"​",-1),M=e("p",null,"The version of Composer to install.",-1),G=e("p",null,[o("For valid values, please see the "),e("a",{href:"https://hub.docker.com/_/composer",target:"_blank",rel:"noreferrer"},[o("Docker Hub "),e("code",null,"composer"),o(" page")]),o(".")],-1),U=e("p",null,[e("strong",null,"Default value"),o(": "),e("code",null,"2.6")],-1),F={id:"apt-packages-extra",tabindex:"-1"},W=e("code",null,"APT_PACKAGES_EXTRA",-1),$=e("a",{class:"header-anchor",href:"#apt-packages-extra","aria-label":'Permalink to "`APT_PACKAGES_EXTRA` <Badge type="tip" text="DOCKER_APP_APT_PACKAGES_EXTRA in your .env file" />"'},"​",-1),J=e("p",null,[o("Extra APT packages (separated by space) that should be installed inside the image by "),e("code",null,"apt-get install")],-1),j=e("p",null,[e("strong",null,"Default value"),o(": "),e("code",null,'""')],-1),Q={id:"nginx-version",tabindex:"-1"},Z=e("code",null,"NGINX_VERSION",-1),ee=e("a",{class:"header-anchor",href:"#nginx-version","aria-label":'Permalink to "`NGINX_VERSION` <Badge type="warning" text="not available in your .env file" />"'},"​",-1),oe=i('<p>The version of <code>nginx</code> to use when targeting <a href="./runtimes.html#nginx-fpm"><code>nginx-runtime</code></a>.</p><p>Please see the <a href="https://hub.docker.com/_/nginx" target="_blank" rel="noreferrer">Docker Hub <code>nginx</code> page</a> for available versions.</p><p><strong>Default value</strong>: <code>1.25.3</code></p>',3),te={id:"forego-version",tabindex:"-1"},ae=e("code",null,"FOREGO_VERSION",-1),ie=e("a",{class:"header-anchor",href:"#forego-version","aria-label":'Permalink to "`FOREGO_VERSION` <Badge type="warning" text="not available in your .env file" />"'},"​",-1),ne=e("p",null,[o("The version of "),e("a",{href:"https://github.com/ddollar/forego",target:"_blank",rel:"noreferrer"},[e("code",null,"forego")]),o(" to install.")],-1),re=e("p",null,[e("strong",null,"Default value"),o(": "),e("code",null,"0.17.2")],-1),le={id:"gomplate-version",tabindex:"-1"},se=e("code",null,"GOMPLATE_VERSION",-1),de=e("a",{class:"header-anchor",href:"#gomplate-version","aria-label":'Permalink to "`GOMPLATE_VERSION` <Badge type="warning" text="not available in your .env file" />"'},"​",-1),ce=e("p",null,[o("The version of "),e("a",{href:"https://github.com/hairyhenderson/gomplate",target:"_blank",rel:"noreferrer"},[e("code",null,"goplate")]),o(" to install.")],-1),pe=e("p",null,[e("strong",null,"Default value"),o(": "),e("code",null,"v3.11.6")],-1),he={id:"dotenv-linter-version",tabindex:"-1"},ue=e("code",null,"DOTENV_LINTER_VERSION",-1),_e=e("a",{class:"header-anchor",href:"#dotenv-linter-version","aria-label":'Permalink to "`DOTENV_LINTER_VERSION` <Badge type="warning" text="not available in your .env file" />"'},"​",-1),me=e("p",null,[o("Version of "),e("a",{href:"https://github.com/dotenv-linter/dotenv-linter",target:"_blank",rel:"noreferrer"},[e("code",null,"dotenv-linter")]),o(" to install.")],-1),fe=e("p",null,[e("strong",null,"Default value"),o(": "),e("code",null,"v3.2.0")],-1),ge={id:"php-base-type",tabindex:"-1"},be=e("code",null,"PHP_BASE_TYPE",-1),ve=e("a",{class:"header-anchor",href:"#php-base-type","aria-label":'Permalink to "`PHP_BASE_TYPE` <Badge type="tip" text="DOCKER_APP_BASE_TYPE in your .env file" />"'},"​",-1),Pe=i('<p>The <code>PHP</code> base image layer to use when building the runtime container.</p><p>When targeting</p><ul><li><a href="./runtimes.html#apache"><code>apache-runtime</code></a> use <code>apache</code></li><li><a href="./runtimes.html#fpm"><code>fpm-runtime</code></a> use <code>fpm</code></li><li><a href="./runtimes.html#nginx-fpm"><code>nginx-runtime</code></a> use <code>fpm</code></li></ul><p><strong>Valid values</strong>:</p><ul><li><code>apache</code></li><li><code>fpm</code></li><li><code>cli</code></li></ul><p><strong>Default value</strong>: <code>apache</code></p>',6),Ee={id:"php-debian-release",tabindex:"-1"},xe=e("code",null,"PHP_DEBIAN_RELEASE",-1),ye=e("a",{class:"header-anchor",href:"#php-debian-release","aria-label":'Permalink to "`PHP_DEBIAN_RELEASE` <Badge type="tip" text="DOCKER_APP_DEBIAN_RELEASE in your .env file" />"'},"​",-1),Te=i("<p>The <code>Debian</code> Operation System version to use.</p><p><strong>Valid values</strong>:</p><ul><li><code>bullseye</code></li><li><code>bookworm</code></li></ul><p><strong>Default value</strong>: <code>bullseye</code></p>",4);function ke(Se,Ae,Ne,Re,Oe,we){const t=r("Badge");return s(),l("div",null,[c,e("h3",p,[h,o(),a(t,{type:"tip",text:"DOCKER_APP_PHP_VERSION in your .env file"}),o(),u]),_,e("h3",m,[f,o(),a(t,{type:"warning",text:"not available in your .env file"}),o(),g]),b,e("h3",v,[P,o(),a(t,{type:"tip",text:"DOCKER_APP_PHP_PECL_EXTENSIONS_EXTRA in your .env file"}),o(),E]),x,y,T,e("h3",k,[S,o(),a(t,{type:"warning",text:"not available in your .env file"}),o(),A]),N,e("h3",R,[O,o(),a(t,{type:"tip",text:"DOCKER_APP_PHP_EXTENSIONS_EXTRA in your .env file"}),o(),w]),I,D,C,e("h3",q,[H,o(),a(t,{type:"warning",text:"not available in your .env file"}),o(),V]),B,X,K,e("h3",L,[Y,o(),a(t,{type:"warning",text:"not available in your .env file"}),o(),z]),M,G,U,e("h3",F,[W,o(),a(t,{type:"tip",text:"DOCKER_APP_APT_PACKAGES_EXTRA in your .env file"}),o(),$]),J,j,e("h3",Q,[Z,o(),a(t,{type:"warning",text:"not available in your .env file"}),o(),ee]),oe,e("h3",te,[ae,o(),a(t,{type:"warning",text:"not available in your .env file"}),o(),ie]),ne,re,e("h3",le,[se,o(),a(t,{type:"warning",text:"not available in your .env file"}),o(),de]),ce,pe,e("h3",he,[ue,o(),a(t,{type:"warning",text:"not available in your .env file"}),o(),_e]),me,fe,e("h3",ge,[be,o(),a(t,{type:"tip",text:"DOCKER_APP_BASE_TYPE in your .env file"}),o(),ve]),Pe,e("h3",Ee,[xe,o(),a(t,{type:"tip",text:"DOCKER_APP_DEBIAN_RELEASE in your .env file"}),o(),ye]),Te])}const Ce=n(d,[["render",ke]]);export{De as __pageData,Ce as default};
