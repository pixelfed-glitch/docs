import{_ as o,E as n,c as l,m as e,a as i,J as a,V as t,o as r}from"./chunks/framework.wUJtDaaB.js";const Me=JSON.parse('{"title":"Migrate to the Pixelfed + Docker Compose v2","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"running-pixelfed/docker/migrate/v2.0.md","filePath":"running-pixelfed/docker/migrate/v2.0.md"}'),h={name:"running-pixelfed/docker/migrate/v2.0.md"},d=t('<h1 id="migrate-to-the-pixelfed-docker-compose-v2" tabindex="-1">Migrate to the Pixelfed + Docker Compose v2 <a class="header-anchor" href="#migrate-to-the-pixelfed-docker-compose-v2" aria-label="Permalink to &quot;Migrate to the Pixelfed + Docker Compose v2&quot;">‚Äã</a></h1><p>There are <a href="https://github.com/pixelfed/pixelfed/pull/4844" target="_blank" rel="noreferrer"><em>a lot</em> of changes</a> in how Pixelfed Docker/Docker Compose images work - it&#39;s a complete rewrite - with a couple of breaking/significant changes.</p><p>But don&#39;t worry! This document and the <a href="#migration-steps">Migration Guide</a> further down covers all of the required changes and steps you need to safely migrate.</p><p>We don&#39;t take <em>breaking changes</em> or <em>lengthy migration guides</em> lightly, and future iterations and improvements will be either seamless or <em>much</em> smaller in scope and complexity.</p><p>We do however believe that the <em>many</em> improvements (listed below) are worth it, and sets us up for a brighter future for self-hosted and maintainable Pixelfed servers</p><h2 id="breaking-changes" tabindex="-1">Breaking Changes <a class="header-anchor" href="#breaking-changes" aria-label="Permalink to &quot;Breaking Changes&quot;">‚Äã</a></h2><div class="danger custom-block"><p class="custom-block-title">These changes are breaking, removing, or changing existing behavior from Docker Compose v1 and <em>requires</em> your attention and possibly some steps to fix.</p><p>The <a href="#migration-steps">Migration Guide</a> has step by step guide for most of these!</p></div>',7),p={id:"new-dockerfile",tabindex:"-1"},c=e("code",null,"Dockerfile",-1),k=e("a",{class:"header-anchor",href:"#new-dockerfile","aria-label":'Permalink to "New `Dockerfile` <Badge type="danger" text="Breaking" />"'},"‚Äã",-1),u=e("p",null,[i("All "),e("a",{href:"./../runtimes.html"},"runtime variations"),i(" of Pixelfed on Docker are now build from a single "),e("code",null,"Dockerfile"),i(", rather than the previously three.")],-1),g=e("p",null,[i("Please see the "),e("a",{href:"./../runtimes.html"},"Docker Runtimes"),i(" and "),e("a",{href:"./../customize.html"},"Docker Customization"),i(" documentation for more information.")],-1),m={id:"new-docker-compose-file",tabindex:"-1"},y=e("a",{class:"header-anchor",href:"#new-docker-compose-file","aria-label":'Permalink to "New Docker Compose file <Badge type="danger" text="Breaking" />"'},"‚Äã",-1),f=e("p",null,[i("The "),e("code",null,"docker-compose.yml"),i(" file has been rewritten from the ground up to be provide better defaults and more flexible out of the box.")],-1),b=e("p",null,[i("This mean that "),e("em",null,"most"),i(" things you would likely want to tweak can be controlled from your "),e("code",null,".env"),i(" config file, like installing additional APT Packages, PECL/PHP extensions, changing PHP version, modifying PHP settings (such as "),e("code",null,"memory_limit"),i("), disabling specific services, changing where data and config files are stored, and so on.")],-1),F={id:"new-env-env-docker-file",tabindex:"-1"},_=e("code",null,".env",-1),v=e("code",null,".env.docker",-1),C=e("a",{class:"header-anchor",href:"#new-env-env-docker-file","aria-label":'Permalink to "New `.env` / `.env.docker` file <Badge type="danger" text="Breaking" />"'},"‚Äã",-1),w=e("p",null,[i("The starter "),e("code",null,".env.docker"),i(" file has been "),e("em",null,"significantly"),i(" expanded with most of the Pixelfed settings available, along with many Docker Compose specific ones.")],-1),E=e("p",null,[i("Your Pixelfed specific settings are (of course) unchanged, but you need to configure them again after copying the new "),e("code",null,".env.docker"),i(" file.")],-1),B={id:"using-bind-volumes",tabindex:"-1"},T=e("code",null,"bind",-1),P=e("a",{class:"header-anchor",href:"#using-bind-volumes","aria-label":'Permalink to "Using `bind` volumes <Badge type="danger" text="Breaking" />"'},"‚Äã",-1),x=t('<p>The old <code>docker-compose.yml</code> configuration file <a href="https://github.com/pixelfed/pixelfed/blob/b1ff44ca2f75c088a11576fb03b5bad2fbed4d5c/docker-compose.yml#L72-L76" target="_blank" rel="noreferrer">declared four anonymous Docker volumes</a> for storing Pixelfed related data within.</p><p>These are no longer used, instead favoring a <a href="https://docs.docker.com/storage/bind-mounts/" target="_blank" rel="noreferrer">Docker bind volume</a> approach where content is stored directly on the server disk, outside of a Docker volume.</p><p>The consequence of this change is that <em>all</em> data stored in the - now unsupported - Docker volumes will no longer be accessible by Pixelfed.</p><ul><li>The <code>db-data</code> volume <em>definitely</em> contains important data - it&#39;s your database, after all!</li><li>The <code>app-storage</code> volume <em>definitely</em> contains important data - it&#39;s files uploaded to - or seen by - your server!</li><li>The <code>redis-data</code> volume <em>might</em> contain important data (depending on your configuration)</li><li>The <code>app-bootstrap</code> volume does not contain any important data - all of it will be generated automatically in the new setup on startup. We will <em>not</em> be migrating this!</li></ul><div class="tip custom-block"><p class="custom-block-title">Please see the <a href="#migration-steps">Migration steps</a> section for information on moving your data.</p></div>',5),A={id:"no-docker-networks",tabindex:"-1"},D=e("a",{class:"header-anchor",href:"#no-docker-networks","aria-label":'Permalink to "No Docker networks <Badge type="danger" text="Breaking change" />"'},"‚Äã",-1),O=t('<p>The <code>docker-compose.yml</code> no longer include any custom networks, instead favoring the simplicity of the default <code>bridge</code> network.</p><p>The published ports can be configured via your <code>.env</code> file, look for the <code>DOCKER_*_HOST_PORT</code> keys.</p><h2 id="changes-needing-attention" tabindex="-1">Changes needing attention <a class="header-anchor" href="#changes-needing-attention" aria-label="Permalink to &quot;Changes needing attention&quot;">‚Äã</a></h2><div class="warning custom-block"><p class="custom-block-title">These changes are mostly informational and unlikely to cause any issues during upgrade, but included for visibility and in case your specific set up require them to be changed.</p></div>',4),N={id:"new-redis-version",tabindex:"-1"},R=e("a",{class:"header-anchor",href:"#new-redis-version","aria-label":'Permalink to "New Redis version <Badge type="warning" text="Attention needed" />"'},"‚Äã",-1),I=t("<p>Redis has been upgraded from using the last version <code>5</code> release to using the latest <code>7.2</code> version instead - favoring the <code>debian</code> variant instead of <code>alpine</code>.</p><p>The Redis version can be controlled in your <code>.env</code> file via <code>DOCKER_REDIS_VERSION</code>.</p><p>If you want to keep using the Redis version set <code>DOCKER_REDIS_VERSION=&quot;5-alpine&quot;</code> in your <code>.env</code> file.</p><p>If you want to use <code>7.2</code> but the alpine variant, simply append <code>-alpine</code> to the <code>DOCKER_REDIS_VERSION</code> (e.g. <code>DOCKER_REDIS_VERSION=7.2-alpine</code>).</p>",4),S={id:"pinned-mariadb-version",tabindex:"-1"},q=e("a",{class:"header-anchor",href:"#pinned-mariadb-version","aria-label":'Permalink to "Pinned MariaDB version <Badge type="warning" text="Attention needed" />"'},"‚Äã",-1),H=e("p",null,[i("The included "),e("code",null,"db"),i(" service is now pinned to MariaDB "),e("code",null,"11.2"),i(" instead of "),e("code",null,"latest"),i(".")],-1),L=e("p",null,[i("You can revert to the previous setting by setting "),e("code",null,'DB_VERSION="latest"'),i(" in your "),e("code",null,".env"),i(" file.")],-1),M={id:"automatic-one-time-setup-tasks",tabindex:"-1"},V=e("a",{class:"header-anchor",href:"#automatic-one-time-setup-tasks","aria-label":'Permalink to "Automatic "One-time setup tasks" <Badge type="warning" text="Attention needed" />"'},"‚Äã",-1),K=t('<p>This is also covered in the <a href="#migration-steps">migration guide</a> but existing Pixelfed instances need to disable the automatic run of <a href="./../../generic/installation.html#one-time-setup-tasks">One-time setup tasks</a> by setting <code>DOCKER_APP_RUN_ONE_TIME_SETUP_TASKS=0</code> in your <code>.env</code> file.</p><p>Your container <em>will</em> fail to start up if these are already configured for your site.</p><h2 id="new-or-improved-features" tabindex="-1">New or improved features <a class="header-anchor" href="#new-or-improved-features" aria-label="Permalink to &quot;New or improved features&quot;">‚Äã</a></h2><div class="tip custom-block"><p class="custom-block-title">All the new and exciting features and capabilities. üöÄ</p><p>This is where we hope we can convince you that the breaking changes and migration work was worth it ‚ù§Ô∏è</p></div>',4),z={id:"nginx-proxy-service",tabindex:"-1"},U=e("a",{class:"header-anchor",href:"#nginx-proxy-service","aria-label":'Permalink to "Nginx Proxy service <Badge type="tip" text="New" />"'},"‚Äã",-1),W=t('<p>The new <code>docker-compose.yml</code> includes an <em>optional</em> (but enabled by default) Nginx Proxy for SSL/TLS termination.</p><p>Please see <a href="./../faq.html#how-do-i-use-my-own-proxy-server"><code>How do I use my own Proxy server?</code></a> and <code>DOCKER_PROXY_*</code> keys in the <code>.env</code> file for more information.</p>',2),G={id:"letsencrypt-acme-service",tabindex:"-1"},Y=e("a",{class:"header-anchor",href:"#letsencrypt-acme-service","aria-label":'Permalink to "LetsEncrypt/ACME service <Badge type="tip" text="New" />"'},"‚Äã",-1),$=t('<p>The new <code>docker-compose.yml</code> includes an <em>optional</em> (but enabled by default) ACME/LetsEncrypt service that when combined with the new Nginx Proxy automatically creates and maintains your SSL/TLS certificates.</p><p>Please see <a href="./../faq.html#how-do-i-use-my-own-ssl-certificate"><code>How do I use my own SSL certificate?</code></a> and <code>DOCKER_PROXY_*</code> + <code>LETSENCRYPT_*</code> keys in the <code>.env</code> file for more information.</p>',2),j={id:"automatic-run-of-one-time-setup-tasks",tabindex:"-1"},X=e("a",{class:"header-anchor",href:"#automatic-run-of-one-time-setup-tasks","aria-label":'Permalink to "Automatic run of "One-time setup tasks" <Badge type="tip" text="New" />"'},"‚Äã",-1),Z=e("p",null,[i("When you set up a new Pixelfed server, there is handful of commands you need to run once (and only once) - these are called "),e("a",{href:"./../../generic/installation.html#one-time-setup-tasks"},"One-time setup tasks"),i(".")],-1),J=e("p",null,[i("These steps are now automatically run for you when "),e("a",{href:"./../installation.html"},"creating a new Pixelfed server"),i(".")],-1),Q={id:"extensive-documentation",tabindex:"-1"},ee=e("a",{class:"header-anchor",href:"#extensive-documentation","aria-label":'Permalink to "Extensive documentation <Badge type="tip" text="New" />"'},"‚Äã",-1),ie=e("p",null,[i("How to run and use the new Docker setup has been documented extensively. Not only on "),e("em",null,"this"),i(" page, but also in all the new scripts, "),e("code",null,"Dockerfile"),i(", and "),e("code",null,".env.docker"),i(" file.")],-1),se=e("p",null,[i("We hope this will make it much easier to confidently and comfortably run your Pixelfed server with Docker - and when things "),e("em",null,"do"),i(" go wrong, the debugging and fixing of the issue much easier and quicker.")],-1),ae={id:"automatic-publishing-of-docker-images",tabindex:"-1"},te=e("a",{class:"header-anchor",href:"#automatic-publishing-of-docker-images","aria-label":'Permalink to "Automatic publishing of Docker images <Badge type="tip" text="Improved" />"'},"‚Äã",-1),oe=t('<p>Going forward we will automatically build and push Docker images for Pixelfed to both <a href="https://hub.docker.com/r/pixelfed/pixelfed" target="_blank" rel="noreferrer">Docker Hub</a> and <a href="https://github.com/pixelfed/pixelfed/pkgs/container/pixelfed" target="_blank" rel="noreferrer">GitHub Container Registry</a>.</p><p>We will automatically be pushing all combinations of <a href="./../runtimes.html">our supported Docker runtimes</a> and PHP version (8.1, 8.2 and soon 8.3).</p><p>Further more, testing Pull Requests has never been easier, as we will also build and push Docker images for all Pull Requests with tag prefix <code>pr-{ID}</code> (e.x. <code>pixelfed/pixelfed:pr-4844-apache-8.2</code>).</p><p>You can control which Pixelfed release you use via the <code>DOCKER_APP_RELEASE</code> key/value pair in your <code>.env</code> file.</p>',4),ne={id:"customizable-dockerfile",tabindex:"-1"},le=e("code",null,"Dockerfile",-1),re=e("a",{class:"header-anchor",href:"#customizable-dockerfile","aria-label":'Permalink to "Customizable `Dockerfile` <Badge type="tip" text="New" />"'},"‚Äã",-1),he=t('<p>It&#39;s now possible to tweak many Docker related settings without copying or forking Pixelfed Dockerfile!</p><p>The new Dockerfile has many <a href="./../customize.html#build-settings-arguments">Build Arguments</a> (e.g., <code>--build-arg</code>) allowing you to easily</p><ul><li><a href="./../customize.html#php_version">Change your PHP version</a></li><li><a href="./../customize.html#php_pecl_extensions">Install extra PECL extensions</a></li><li><a href="./../customize.html#php_extensions">Install extra PHP extensions</a></li><li><a href="./../customize.html#apt_packages_extra">Install extra APT packages</a></li><li><a href="./../customize.html#php_debian_release">Change Debian version</a></li></ul><p>All of these (and more) settings are controlled from your <code>.env</code> file, and you simply need to run <code>docker compose build</code> to build your own bespoke version of Pixelfed on your server!</p>',4),de={id:"customizable-entrypoint",tabindex:"-1"},pe=e("code",null,"ENTRYPOINT",-1),ce=e("a",{class:"header-anchor",href:"#customizable-entrypoint","aria-label":'Permalink to "Customizable `ENTRYPOINT` <Badge type="tip" text="New" />"'},"‚Äã",-1),ke=e("p",null,[i("Do you want to "),e("a",{href:"./../customize.html#run-script-on-startup"},"run a script on container start up?"),i(" Or perhaps to "),e("a",{href:"./../customize.html#disabling-entrypoint-or-individual-scripts"},"disable a specific init script?"),i(" Or even "),e("a",{href:"./../customize.html#disabling-entrypoint-or-individual-scripts"},"disable all of the init scripts?")],-1),ue=e("p",null,[i("Now you can! And like with all the other settings it's just a setting in your "),e("code",null,".env"),i(" file!")],-1),ge={id:"templating-files",tabindex:"-1"},me=e("a",{class:"header-anchor",href:"#templating-files","aria-label":'Permalink to "Templating files <Badge type="tip" text="New" />"'},"‚Äã",-1),ye=e("p",null,[i("The new "),e("code",null,"ENTRYPOINT"),i(" system offers an "),e("a",{href:"./../customize.html#templating"},"extensible and flexible way for you to template configuration files"),i(" such as your "),e("code",null,"php.ini"),i(" during container start up.")],-1),fe=e("p",null,[i("The templating system has access to all settings from your "),e("code",null,".env"),i(" file, and you can "),e("a",{href:"./../customize.html#file-path-examples"},"easily add your own templates!")],-1),be={id:"automatic-php-web-server-configuration",tabindex:"-1"},Fe=e("a",{class:"header-anchor",href:"#automatic-php-web-server-configuration","aria-label":'Permalink to "Automatic PHP/Web server configuration <Badge type="tip" text="New" />"'},"‚Äã",-1),_e=t('<p>Thanks to the new <a href="./../customize.html#templating">templating system</a> we now automatically calculate and configure required PHP / Web server settings for you - using your <code>.env</code> settings - such as</p><ul><li>(php.ini) <code>upload_max_filesize</code> with this formula <code>(MAX_PHOTO_SIZE * MAX_ALBUM_LENGTH) + BUFFER</code></li><li>(php.ini) <code>post_max_size</code> with this formula <code>(MAX_PHOTO_SIZE * MAX_ALBUM_LENGTH) + BUFFER</code></li><li>(php.ini) <code>max_file_uploads</code> using <code>MAX_ALBUM_LENGTH</code></li><li>(php.ini) <code>memory_limit</code> using <code>PHP_MEMORY_LIMIT</code></li><li>(php.ini) <code>[Date]date.timezone</code> using <code>APP_TIMEZONE</code></li></ul>',2),ve={id:"permission-auto-fixing",tabindex:"-1"},Ce=e("a",{class:"header-anchor",href:"#permission-auto-fixing","aria-label":'Permalink to "Permission auto-fixing <Badge type="tip" text="New" />"'},"‚Äã",-1),we=e("p",null,[i("If your installation for some reason has issues with permissions to files/directories, you can now automatically "),e("a",{href:"./../customize.html#fixing-ownership-on-startup"},"fix ownership and permissions on start up"),i(".")],-1),Ee=e("p",null,"This is an opt-in feature.",-1),Be={id:"faster-docker-image-building",tabindex:"-1"},Te=e("a",{class:"header-anchor",href:"#faster-docker-image-building","aria-label":'Permalink to "Faster Docker image building <Badge type="tip" text="Improved" />"'},"‚Äã",-1),Pe=t('<p>We now utilize <a href="https://docs.docker.com/build/buildkit/" target="_blank" rel="noreferrer">BuildKit</a>, <a href="https://docs.docker.com/build/cache/backends/" target="_blank" rel="noreferrer">layer caching</a>, <a href="https://docs.docker.com/build/building/multi-stage/" target="_blank" rel="noreferrer">multi-stage</a>, and <a href="https://docs.docker.com/build/building/multi-platform/" target="_blank" rel="noreferrer">multi-platform</a> to <em>really</em> speed up the building of Docker images.</p><p>Under ideal conditions, a <code>docker compose build</code> can now complete in less than a minute for most PHP changes. This of course also improve the speed of building Docker images in GitHub Actions and CI!</p>',2),xe={id:"fork-friendly-docker-releasing",tabindex:"-1"},Ae=e("a",{class:"header-anchor",href:"#fork-friendly-docker-releasing","aria-label":'Permalink to "Fork friendly Docker releasing <Badge type="tip" text="New" />"'},"‚Äã",-1),De=t(`<p>Forks of Pixelfed that have enabled GitHub Actions should <em>automatically</em> have the same Docker build + push experience as pixelfed/pixelfed have.</p><p>The <code>docker</code> workflow will by default build + push to the GitHub Container Registry for the project the commit was made to, meaning any downstream projects will not have to fork or modify their <code>docker</code> workflow to have a reliable release proccess.</p><p>Forks can further more set GitHub Actions Project variables <code>DOCKER_HUB_USERNAME</code>, <code>DOCKER_HUB_ORGANISATION</code>, <code>DOCKER_HUB_REPO</code> and <code>DOCKER_HUB_TOKEN</code> for automatic pushing of images to Docker Hub as well. Please see the <code>.github/workflows/docker.yml</code> file for more information.</p><h2 id="migration-steps" tabindex="-1">Migration steps <a class="header-anchor" href="#migration-steps" aria-label="Permalink to &quot;Migration steps&quot;">‚Äã</a></h2><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This is a best-effort guide to help migrate off the old system. The operation is potentially complicated (and risky), so please be careful!</p></div><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p><em><strong>PLEASE MAKE SURE TO BACKUP YOUR SERVER AND DATA BEFORE ATTEMPTING A MIGRATION</strong></em></p><p><strong>YOUR INSTANCE WILL BE <em>DOWN</em> WHILE DOING THE MIGRATION; PLEASE PLAN ACCORDINGLY; DEPENDING ON DATA SIZE IT COULD TAKE ANYWHERE FROM 5 <em>MINUTES</em> TO 5 <em>HOURS</em></strong></p></div><h3 id="_1-backup" tabindex="-1">1) Backup <a class="header-anchor" href="#_1-backup" aria-label="Permalink to &quot;1) Backup&quot;">‚Äã</a></h3><ol><li>Make sure to back up your server (ideally <em>after</em> step 1 below has been completed, but <em>before</em> is better than not at all!)</li><li>Capture the current Git version / Pixelfed release you are on (e.g., <code>git --no-pager log -1</code> outputs the commit reference as the 2nd word in the first line)</li><li>Backup your <code>.env</code> file (we will do this in step 3 as well)</li><li>Backup your <code>docker-compose.yml</code> file (<code>cp docker-compose.yml docker-compose.yml.old</code>)</li><li>Read through the <em>entire</em> document before starting</li></ol><h3 id="_2-migrate-env-file" tabindex="-1">2) Migrate <code>.env</code> file <a class="header-anchor" href="#_2-migrate-env-file" aria-label="Permalink to &quot;2) Migrate \`.env\` file&quot;">‚Äã</a></h3><p>The new <code>.env</code> file for Docker is a bit different from the old one (many new settings!) so the easiest is to grab the new <code>.env.docker</code> file and modify it from scratch again.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.old</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://raw.githubusercontent.com/pixelfed/pixelfed/dev/.env.docker</span></span></code></pre></div><p>Then open your old <code>.env.old</code> configuration file, and for each of the key/value pairs within it, find and update the key in the new <code>.env.new</code> configuration file.</p><p>Don&#39;t worry, though; the file might <em>look</em> different (and significantly larger), but it behaves <em>exactly</em> the way the old file did; it just has way more options!</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Don&#39;t worry if a key is missing in <code>.env.new</code>; you can add those key/value pairs back to the new file - ideally in the <code>Other configuration</code> section near the end of the file - but anywhere <em>should</em> be fine.</p></div><p>This is a great time to review your settings and familiarize yourself with all the new ones.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>In <em>particular</em> the following sections</p><ul><li><code>PHP configuration</code> section (near the end of the file) where <ul><li>The <code>DOCKER_APP_PHP_VERSION</code> settings control your PHP version</li><li>The <code>PHP_MEMORY_LIMIT</code> settings control your PHP memory limit</li></ul></li><li><code>Docker Specific configuration</code> section (near the end of the file) where <ul><li>The <code>DOCKER_ALL_HOST_DATA_ROOT_PATH</code> setting dictates where the newly migrated data will live.</li><li>The <code>DOCKER_APP_RUN_ONE_TIME_SETUP_TASKS</code> controls whether the <code>One-time setup tasks</code> should run. We do <em>not</em> want this since your Pixelfed instance is already set up!</li></ul></li><li><a href="./../faq.html">Frequently Asked Question / FAQ</a><ul><li><a href="./../faq.html#how-do-i-use-my-own-proxy-server">How do I use my own Proxy server?</a></li><li><a href="./../faq.html#how-do-i-use-my-own-ssl-certificate">How do I use my own SSL certificate?</a></li></ul></li></ul></div><h3 id="_3-stop-containers" tabindex="-1">3) Stop containers <a class="header-anchor" href="#_3-stop-containers" aria-label="Permalink to &quot;3) Stop containers&quot;">‚Äã</a></h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This will take your Pixelfed instance offline</p></div><p>Stop <em>all</em> running containers (web, worker, redis, db)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span></span></code></pre></div><h3 id="_4-update-source-code" tabindex="-1">4) Update source code <a class="header-anchor" href="#_4-update-source-code" aria-label="Permalink to &quot;4) Update source code&quot;">‚Äã</a></h3><p>Update your project to the latest release of Pixelfed by running:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $release</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The <code>$release</code> can be any valid git reference like <code>dev,</code> <code>staging</code>, or a <a href="https://github.com/pixelfed/pixelfed/releases" target="_blank" rel="noreferrer">tagged release</a> such as <code>v0.12.0</code>.</p></div><h3 id="_5-migrate-data" tabindex="-1">5) Migrate data <a class="header-anchor" href="#_5-migrate-data" aria-label="Permalink to &quot;5) Migrate data&quot;">‚Äã</a></h3><p>The migration guide temporarily branches into two paths here:</p><ul><li><a href="#a-anonymous-volumes"><strong>Path A</strong></a> if you used Docker Anonymous Volumes.</li><li><a href="#b-bindhost-volumes"><strong>Path B</strong></a> if you used host/bind volumes.</li></ul><div class="tip custom-block"><p class="custom-block-title">Which Docker volume type am I using?</p><p>If your old <code>docker-compose.yml</code> had a <code>volumes</code> configuration section like below, you used should follow <a href="#a-anonymous-volumes">Path A</a>.</p><p>This is also what the v1 <code>docker-compose.yml</code> file for pixelfed/pixelfed used.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  db-data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  redis-data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  app-storage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  app-bootstrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div></div><h4 id="a-anonymous-volumes" tabindex="-1">A) Anonymous volumes <a class="header-anchor" href="#a-anonymous-volumes" aria-label="Permalink to &quot;A) Anonymous volumes&quot;">‚Äã</a></h4><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong>It&#39;s important to note that this is a <em>copy</em> operation - so disk usage will (temporarily) double while you migrate</strong></p><p>We provide a &quot;migration container&quot; for your convenience that can access both the new and old volumes, allowing you to copy the data into the setup.</p><p>You can use <code>mv</code> (move files) instead of <code>rsync</code> in the guide below - but this is a be a <em>destructive</em> action, so you can&#39;t quickly roll back to your old setup, as the data no longer exists in the anonymous Docker volumes.</p></div><h5 id="a1-run-migration-container" tabindex="-1">A1) Run migration container <a class="header-anchor" href="#a1-run-migration-container" aria-label="Permalink to &quot;A1) Run migration container&quot;">‚Äã</a></h5><p>You can access the Docker container with both old and new volumes by running the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose.migrate.yml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> migrate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><p>This will put you in the <code>/migrate</code> directory within the container, containing 9 directories like shown here:</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>|-- app-storage</span></span>
<span class="line"><span>|   |-- new</span></span>
<span class="line"><span>|   \`-- old</span></span>
<span class="line"><span>|-- db-data</span></span>
<span class="line"><span>|   |-- new</span></span>
<span class="line"><span>|   \`-- old</span></span>
<span class="line"><span>\`-- redis-data</span></span>
<span class="line"><span>    |-- new</span></span>
<span class="line"><span>    \`-- old</span></span></code></pre></div><h5 id="a2-check-old-folders" tabindex="-1">A2) Check old folders <a class="header-anchor" href="#a2-check-old-folders" aria-label="Permalink to &quot;A2) Check old folders&quot;">‚Äã</a></h5><p>First thing we want to do is to check if the data inside the container looks correct!</p><p>The following commands should all return <em>SOME</em> files and data - if they do not - then there might be an issue with the anonymous volume binding.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The content of the old folders may not be <em>exactly</em> whats show in the examples below - if a couple of the files or folders match, it&#39;s extremely likely it&#39;s correct!</p></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app-storage/old</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  debugbar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  framework</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  logs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">oauth-private.key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  oauth-public.key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  purify</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Redis data might also be entirely empty, thats *okay*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis-data/old</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendonlydir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server.pid</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db-data/old</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aria_log_control</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ddl_recovery-backup.log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ib_buffer_pool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ib_logfile0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ibdata1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  mariadb_upgrade_info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  multi-master.info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  mysql</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">performance_schema</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  pixelfed_prod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  sys</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  undo001</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  undo002</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  undo003</span></span></code></pre></div><h5 id="a3-check-new-folders" tabindex="-1">A3) Check new folders <a class="header-anchor" href="#a3-check-new-folders" aria-label="Permalink to &quot;A3) Check new folders&quot;">‚Äã</a></h5><p>The following commands should all return <em>NO</em> files and data - if they contain data - you need to delete it (backup first!) or skip that migration step.</p><p>If you haven&#39;t run <code>docker compose up</code> since you updated your project in step (2) - they should be empty and good to go.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app-storage/new</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db-data/new</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis-data/new</span></span></code></pre></div><h5 id="a4-copy-data" tabindex="-1">A4) Copy data <a class="header-anchor" href="#a4-copy-data" aria-label="Permalink to &quot;A4) Copy data&quot;">‚Äã</a></h5><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This is where we potentially will double your disk usage (temporarily)</p></div><p>Now we will copy the data from the old volumes to the new ones.</p><p>The migration container has <a href="https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories" target="_blank" rel="noreferrer"><code>rsync</code></a> installed - which is perfect for that kind of work!</p><p><strong>NOTE</strong> It&#39;s important that the &quot;source&quot; (first path in the <code>rsync</code> command) has a trailing <code>/</code> - otherwise, the directory layout will turn out wrong!</p><p><strong>NOTE</strong> Depending on your server, these commands might take some time to finish; each command should provide a progress bar with a rough time estimation.</p><p><strong>NOTE</strong> <code>rsync</code> should preserve ownership, permissions, and symlinks correctly for you and all the files copied.</p><p>Let&#39;s copy the data by running the following commands:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rsync</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -avP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app-storage/old/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app-storage/new</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rsync</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -avP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db-data/old/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db-data/new</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rsync</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -avP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis-data/old/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis-data/new</span></span></code></pre></div><h5 id="a5-sanity-checking" tabindex="-1">A5) Sanity checking <a class="header-anchor" href="#a5-sanity-checking" aria-label="Permalink to &quot;A5) Sanity checking&quot;">‚Äã</a></h5><p>Let&#39;s make sure everything is copied over successfully!</p><p>Each <em>new</em> directory should contain <em>something</em> like (but not always exactly) the following - <strong>NO</strong> directory should have a single folder called <code>old</code>; if they do, the <code>rsync</code> commands above didn&#39;t work correctly - and you need to move the content of the <code>old</code> folder into the &quot;root&quot; of the <code>new</code> folder like shown a bit in the following sections.</p><p>The <strong>redis-data/new</strong> directory might also contain a <code>server.pid</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis-data/new</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendonlydir</span></span></code></pre></div><p>The <strong>app-storage/new</strong> directory should look <em>something</em> like this</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app-storage/new</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  debugbar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  framework</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  oauth-private.key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  oauth-public.key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  purify</span></span></code></pre></div><p>The <strong>db-data/new</strong> directory should look <em>something</em> like this. There might be a lot of files or very few files, but there <em>must</em> be a <code>mysql</code>, <code>performance_schema</code>, and <code>\${DB_DATABASE}</code> (e.g., <code>pixelfed_prod</code> directory)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db-data/new</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aria_log_control</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ddl_recovery-backup.log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ib_buffer_pool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ib_logfile0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ibdata1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  mariadb_upgrade_info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  multi-master.info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  mysql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  performance_schema</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  pixelfed_prod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  sys</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  undo001</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  undo002</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  undo003</span></span></code></pre></div><p>If everything looks good, type <code>exit</code> to leave the migration container.</p><h4 id="b-bind-host-volumes" tabindex="-1">B) Bind/Host volumes <a class="header-anchor" href="#b-bind-host-volumes" aria-label="Permalink to &quot;B) Bind/Host volumes&quot;">‚Äã</a></h4><p>If you used Bind/Host volumes, then this guide can&#39;t offer any hard step-by-step guide to move your data, but instead will let you know how things would look if you started from scratch, so you can mirror or change this behavior.</p><p>In your <code>.env</code> file, the following KEY/VALUE pairs controls where your data and config files will go - please review each and make sure your files are in these paths, or adjust them to fit your current layout.</p><div class="tip custom-block"><p class="custom-block-title">You can see in the <code>docker-compose.yml</code> file for each <code>service volume</code> section how they are used.</p></div><ul><li><p><code>DOCKER_ALL_HOST_DATA_ROOT_PATH</code> - The &quot;root&quot; path for all service data.</p><p>Default: <code>./docker-compose-state/data</code></p></li><li><p><code>DOCKER_ALL_HOST_CONFIG_ROOT_PATH</code> - The &quot;root&quot; path for all service configs.</p><p>Default: <code>./docker-compose-state/config</code></p></li><li><p><code>DOCKER_APP_HOST_STORAGE_PATH</code> (<code>/var/www/storage</code>) - Path for Pixelfed <code>storage</code>, e.x., uploads by users, emojis, and such</p><p>Default: <code>\${DOCKER_ALL_HOST_DATA_ROOT_PATH}/pixelfed/storage</code></p></li><li><p><code>DOCKER_APP_HOST_CACHE_PATH</code> (<code>/var/www/bootstrap/cache</code>)</p><p>Path for Pixelfed <code>bootstrap/cache</code> data.</p><p>Default: <code>\${DOCKER_ALL_HOST_DATA_ROOT_PATH}/pixelfed/cache</code></p></li><li><p><code>DOCKER_REDIS_HOST_DATA_PATH</code></p><p>Path where <code>Redis</code> will store it&#39;s data.</p><p>Default: <code>\${DOCKER_ALL_HOST_DATA_ROOT_PATH}/redis</code></p></li><li><p><code>DOCKER_DB_HOST_DATA_PATH</code></p><p>Path where your database (<code>MariaDB</code>) store it&#39;s data.</p><p>Default: <code>\${DOCKER_ALL_HOST_DATA_ROOT_PATH}/db</code></p></li></ul><h3 id="_6-start-containers" tabindex="-1">6) Start containers <a class="header-anchor" href="#_6-start-containers" aria-label="Permalink to &quot;6) Start containers&quot;">‚Äã</a></h3><p>With all an updated Pixelfed (step 2), updated <code>.env</code> file (step 3), and migrated data (steps 4, 5, 6, and 7), we&#39;re ready to start things back up again.</p><p>But before we start your Pixelfed server, let&#39;s put the new <code>.env</code> file we made in step 1 in its proper place.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span></span></code></pre></div><h4 id="the-database" tabindex="-1">The Database <a class="header-anchor" href="#the-database" aria-label="Permalink to &quot;The Database&quot;">‚Äã</a></h4><p>The first thing we want to try is to start up the database by running the following command and checking the logs:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tail</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 250</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --follow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db</span></span></code></pre></div><p>If there are no errors and the server isn&#39;t crashing, great! If you have an easy way of connecting to the database via a GUI or CLI client, do that as well and verify the database and tables are all there.</p><h4 id="redis" tabindex="-1">Redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;Redis&quot;">‚Äã</a></h4><p>The next thing we want to try is to start up the Redis server by running the following command and checking the logs:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tail</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 250</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --follow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis</span></span></code></pre></div><p>if there are no errors and the server isn&#39;t crashing, great!</p><h4 id="worker" tabindex="-1">Worker <a class="header-anchor" href="#worker" aria-label="Permalink to &quot;Worker&quot;">‚Äã</a></h4><p>The next thing we want to try is to start up the Worker server by running the following command and checking the logs:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> worker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tail</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 250</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --follow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> worker</span></span></code></pre></div><p>The container should output a <em>lot</em> of logs from the <a href="./../customize.html#run-script-on-startup">docker-entrypoint system</a>, but <em>eventually</em> you should see these messages</p><ul><li><code>Configuration complete; ready for start up</code></li><li><code>Horizon started successfully.</code></li></ul><p>If you see one or both of those messages, the worker seems to be running.</p><p>If the worker is crash looping, inspect the logs and try to resolve the issues.</p><p>You can consider the following additional steps:</p><ul><li>Enabling <code>DOCKER_APP_ENTRYPOINT_DEBUG</code>, which will show even more log output to help understand what is going on</li><li>Enabling <code>DOCKER_APP_ENSURE_OWNERSHIP_PATHS</code> against the path(s) that might have permission issues</li><li>Fixing permission issues directly on the host since your data should all be in the <code>\${DOCKER_ALL_HOST_DATA_ROOT_PATH}</code> folder (<code>./docker-compose-state/data</code> by default)</li></ul><h4 id="web" tabindex="-1">Web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;Web&quot;">‚Äã</a></h4><p>The final service, <code>web,</code> will bring your site back online! What a journey it has been.</p><p>Let&#39;s get to it: run these commands to start the <code>web</code> service and inspect the logs.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tail</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 250</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --follow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web</span></span></code></pre></div><p>The output should be identical to that of the <code>worker</code>, so please see that section for debugging tips if the container is crash looping.</p><p>If the <code>web</code> service comes online without issues, start the rest of the (optional) services, such as the <code>proxy</code>, if enabled, by running:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tail</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 250</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --follow</span></span></code></pre></div><p>If you changed anything in the <code>.env</code> file while debugging, some containers might restart now; that&#39;s perfectly fine.</p><h3 id="_7-verify" tabindex="-1">7) Verify <a class="header-anchor" href="#_7-verify" aria-label="Permalink to &quot;7) Verify&quot;">‚Äã</a></h3><p>With all services online, it&#39;s time to go to your browser and check everything is working.</p><ol><li>Upload and post a picture</li><li>Comment on a post</li><li>Like a post</li><li>Check Horizon (<code>https://\${APP_DOMAIN}/horizon</code>) for any errors</li><li>Check the Docker compose logs via <code>docker compose logs --follow</code></li></ol><p>If everything looks fine, yay, you made it to the end! Let us do some cleanup</p><h3 id="_8-cleanup" tabindex="-1">8) Cleanup <a class="header-anchor" href="#_8-cleanup" aria-label="Permalink to &quot;8) Cleanup&quot;">‚Äã</a></h3><p>With everything working, please take a new snapshot/backup of your server <em>before</em> we do any cleanup. A post-migration snapshot is handy since it contains both the old and new configuration + data, making any recovery much easier in a rollback scenario later.</p><p>Now, with all the data in the new folders, you can delete the old Docker Container volumes (if you want, completely optional)</p><p>List all volumes and give them a look:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre></div><p>The volumes we want to delete <em>end</em> with the volume name (<code>db-data</code>, <code>app-storage</code>, <code>redis-data</code>, and <code>app-bootstrap</code>.) but have some prefixes in front of them.</p><p>Once you have found the volumes in in the list, delete each of them by running:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $volume_name_in_column_two_of_the_output</span></span></code></pre></div><p>You can also delete the <code>docker-compose.yml.old</code> and <code>.env.old</code> files since they are no longer needed:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose.yml.old</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.old</span></span></code></pre></div><h2 id="rollback" tabindex="-1">Rollback <a class="header-anchor" href="#rollback" aria-label="Permalink to &quot;Rollback&quot;">‚Äã</a></h2><p>Oh no, something went wrong? No worries; you have backups and a quick way back!</p><h3 id="move-docker-compose-yml-back" tabindex="-1">Move <code>docker-compose.yml</code> back <a class="header-anchor" href="#move-docker-compose-yml-back" aria-label="Permalink to &quot;Move \`docker-compose.yml\` back&quot;">‚Äã</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose.yml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose.yml.new</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose.yml.old</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose.yml</span></span></code></pre></div><h3 id="move-env-file-back" tabindex="-1">Move <code>.env</code> file back <a class="header-anchor" href="#move-env-file-back" aria-label="Permalink to &quot;Move \`.env\` file back&quot;">‚Äã</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env.old</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span></span></code></pre></div><h3 id="go-back-to-the-old-source-code-version" tabindex="-1">Go back to the old source code version <a class="header-anchor" href="#go-back-to-the-old-source-code-version" aria-label="Permalink to &quot;Go back to the old source code version&quot;">‚Äã</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $commit_id_from_step_0</span></span></code></pre></div><h3 id="start-things-back-up" tabindex="-1">Start things back up <a class="header-anchor" href="#start-things-back-up" aria-label="Permalink to &quot;Start things back up&quot;">‚Äã</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><h3 id="verify-it-worked" tabindex="-1">Verify it worked <a class="header-anchor" href="#verify-it-worked" aria-label="Permalink to &quot;Verify it worked&quot;">‚Äã</a></h3><p>See <a href="#7-verify">Step 7</a> for recommended steps to verify everythin is working</p>`,123);function Oe(Ne,Re,Ie,Se,qe,He){const s=n("Badge");return r(),l("div",null,[d,e("h3",p,[i("New "),c,i(),a(s,{type:"danger",text:"Breaking"}),i(),k]),u,g,e("h3",m,[i("New Docker Compose file "),a(s,{type:"danger",text:"Breaking"}),i(),y]),f,b,e("h3",F,[i("New "),_,i(" / "),v,i(" file "),a(s,{type:"danger",text:"Breaking"}),i(),C]),w,E,e("h3",B,[i("Using "),T,i(" volumes "),a(s,{type:"danger",text:"Breaking"}),i(),P]),x,e("h3",A,[i("No Docker networks "),a(s,{type:"danger",text:"Breaking change"}),i(),D]),O,e("h3",N,[i("New Redis version "),a(s,{type:"warning",text:"Attention needed"}),i(),R]),I,e("h3",S,[i("Pinned MariaDB version "),a(s,{type:"warning",text:"Attention needed"}),i(),q]),H,L,e("h3",M,[i('Automatic "One-time setup tasks" '),a(s,{type:"warning",text:"Attention needed"}),i(),V]),K,e("h3",z,[i("Nginx Proxy service "),a(s,{type:"tip",text:"New"}),i(),U]),W,e("h3",G,[i("LetsEncrypt/ACME service "),a(s,{type:"tip",text:"New"}),i(),Y]),$,e("h3",j,[i('Automatic run of "One-time setup tasks" '),a(s,{type:"tip",text:"New"}),i(),X]),Z,J,e("h3",Q,[i("Extensive documentation "),a(s,{type:"tip",text:"New"}),i(),ee]),ie,se,e("h3",ae,[i("Automatic publishing of Docker images "),a(s,{type:"tip",text:"Improved"}),i(),te]),oe,e("h3",ne,[i("Customizable "),le,i(),a(s,{type:"tip",text:"New"}),i(),re]),he,e("h3",de,[i("Customizable "),pe,i(),a(s,{type:"tip",text:"New"}),i(),ce]),ke,ue,e("h3",ge,[i("Templating files "),a(s,{type:"tip",text:"New"}),i(),me]),ye,fe,e("h3",be,[i("Automatic PHP/Web server configuration "),a(s,{type:"tip",text:"New"}),i(),Fe]),_e,e("h3",ve,[i("Permission auto-fixing "),a(s,{type:"tip",text:"New"}),i(),Ce]),we,Ee,e("h3",Be,[i("Faster Docker image building "),a(s,{type:"tip",text:"Improved"}),i(),Te]),Pe,e("h3",xe,[i("Fork friendly Docker releasing "),a(s,{type:"tip",text:"New"}),i(),Ae]),De])}const Ve=o(h,[["render",Oe]]);export{Me as __pageData,Ve as default};
